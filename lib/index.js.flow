/**
 * @flow
 */

export type JSONDValidatorSchema =
	| string
	| Array<JSONDValidatorSchema>
	| { [key: string]: JSONDValidatorSchema };

export type JSONDValidatorError = {
	code: string,
	path: Array<string>,
};

export type JSONDValidatorCompiled = (data: any) => Array<JSONDValidatorError>;

export type JSONDValidatorResult = {
	errors: Array<JSONDValidatorError>,
	valid: boolean,
	warning?: string,
};

declare class JSONDValidator {
	constructor(): void,
	schemas: { [key: string]: JSONDValidatorSchema },
	compiled: { [key: string]: JSONDValidatorCompiled },
	addSchema(
		schemaID: string,
		schema: JSONDValidatorSchema,
		lazy?: boolean
	): this,
	getDereferencedSchema(schemaID: string): JSONDValidatorSchema,
	validate(data: any, schemaID: string): JSONDValidatorResult,
}

declare module.exports: Class<JSONDValidator>;
